#DRSM Password Change  
# Add Windows Forms and Drawing assemblies
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Style constants
$FORM_BACKGROUND = [System.Drawing.Color]::FromArgb(240, 240, 240)
$BUTTON_COLOR = [System.Drawing.Color]::FromArgb(0, 120, 215)
$BUTTON_TEXT_COLOR = [System.Drawing.Color]::White
$HEADER_COLOR = [System.Drawing.Color]::FromArgb(51, 51, 51)

# Function to set modern button style with hover effects
function Set-ButtonStyle {
    param($button)
    $button.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    $button.FlatAppearance.BorderSize = 0
    $button.BackColor = $BUTTON_COLOR
    $button.ForeColor = $BUTTON_TEXT_COLOR
    $button.Font = New-Object System.Drawing.Font("Segoe UI", 9, [System.Drawing.FontStyle]::Regular)
    $button.Cursor = [System.Windows.Forms.Cursors]::Hand
    
    # Hover effects
    $button.Add_MouseEnter({
        if ($this.Enabled) {
            $this.BackColor = [System.Drawing.Color]::FromArgb(0, 102, 204)
        }
    })
    $button.Add_MouseLeave({
        if ($this.Enabled) {
            $this.BackColor = $BUTTON_COLOR
        }
    })
}

# Function to generate a random password
function Generate-RandomPassword {
    param([int]$Length = 16)
    $Chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+='
    -join ((1..$Length) | ForEach-Object { Get-Random -InputObject $Chars.ToCharArray() })
}

# Create the main form
$form = New-Object System.Windows.Forms.Form
$form.Text = 'DSRM Password Manager'
$form.Size = New-Object System.Drawing.Size(900,800)
$form.StartPosition = 'CenterScreen'
$form.FormBorderStyle = 'FixedDialog'
$form.MaximizeBox = $false
$form.BackColor = $FORM_BACKGROUND

# Create banner panel
$bannerPanel = New-Object System.Windows.Forms.Panel
$bannerPanel.Size = New-Object System.Drawing.Size(900,60)
$bannerPanel.Location = New-Object System.Drawing.Point(0,0)
$bannerPanel.BackColor = $HEADER_COLOR
$form.Controls.Add($bannerPanel)

# Create banner title
$bannerTitle = New-Object System.Windows.Forms.Label
$bannerTitle.Text = "DSRM Password Management"
$bannerTitle.ForeColor = [System.Drawing.Color]::White
$bannerTitle.Font = New-Object System.Drawing.Font("Segoe UI", 16, [System.Drawing.FontStyle]::Regular)
$bannerTitle.AutoSize = $true
$bannerTitle.Location = New-Object System.Drawing.Point(20,15)
$bannerPanel.Controls.Add($bannerTitle)

# Create main panel for controls
$mainPanel = New-Object System.Windows.Forms.Panel
$mainPanel.Size = New-Object System.Drawing.Size(860,680)
$mainPanel.Location = New-Object System.Drawing.Point(20,80)
$mainPanel.BackColor = [System.Drawing.Color]::White
$form.Controls.Add($mainPanel)

# Create Domain Controllers ListView
$lvDCs = New-Object System.Windows.Forms.ListView
$lvDCs.Location = New-Object System.Drawing.Point(20,20)
$lvDCs.Size = New-Object System.Drawing.Size(820,200)
$lvDCs.View = [System.Windows.Forms.View]::Details
$lvDCs.FullRowSelect = $true
$lvDCs.GridLines = $true
$lvDCs.CheckBoxes = $true
$lvDCs.Columns.Add("DC Name", 300)
$lvDCs.Columns.Add("IP Address", 150)
$lvDCs.Columns.Add("Status", 350)
$mainPanel.Controls.Add($lvDCs)

# Create Options Panel
$optionsPanel = New-Object System.Windows.Forms.Panel
$optionsPanel.Location = New-Object System.Drawing.Point(20,230)
$optionsPanel.Size = New-Object System.Drawing.Size(820,60)
$optionsPanel.BackColor = [System.Drawing.Color]::White
$mainPanel.Controls.Add($optionsPanel)

# Create Password Length Label and ComboBox
$lblPasswordLength = New-Object System.Windows.Forms.Label
$lblPasswordLength.Location = New-Object System.Drawing.Point(0,20)
$lblPasswordLength.Size = New-Object System.Drawing.Size(120,20)
$lblPasswordLength.Text = "Password Length:"
$lblPasswordLength.Font = New-Object System.Drawing.Font("Segoe UI", 9)
$optionsPanel.Controls.Add($lblPasswordLength)

$cboPasswordLength = New-Object System.Windows.Forms.ComboBox
$cboPasswordLength.Location = New-Object System.Drawing.Point(120,17)
$cboPasswordLength.Size = New-Object System.Drawing.Size(80,20)
$cboPasswordLength.DropDownStyle = 'DropDownList'
$cboPasswordLength.Font = New-Object System.Drawing.Font("Segoe UI", 9)
@(16,18,20) | ForEach-Object { $cboPasswordLength.Items.Add($_) }
$cboPasswordLength.SelectedIndex = 0
$optionsPanel.Controls.Add($cboPasswordLength)

# Create Update Mode Radio Buttons
$rbBulkUpdate = New-Object System.Windows.Forms.RadioButton
$rbBulkUpdate.Location = New-Object System.Drawing.Point(250,20)
$rbBulkUpdate.Size = New-Object System.Drawing.Size(150,20)
$rbBulkUpdate.Text = "Update All Selected"
$rbBulkUpdate.Checked = $true
$rbBulkUpdate.Font = New-Object System.Drawing.Font("Segoe UI", 9)
$optionsPanel.Controls.Add($rbBulkUpdate)

# Create Discover button
$btnDiscover = New-Object System.Windows.Forms.Button
$btnDiscover.Location = New-Object System.Drawing.Point(620,15)
$btnDiscover.Size = New-Object System.Drawing.Size(200,30)
$btnDiscover.Text = 'Discover DCs'
Set-ButtonStyle $btnDiscover
$optionsPanel.Controls.Add($btnDiscover)

# Create RichTextBox for output
$txtOutput = New-Object System.Windows.Forms.RichTextBox
$txtOutput.Location = New-Object System.Drawing.Point(20,300)
$txtOutput.Size = New-Object System.Drawing.Size(820,280)
$txtOutput.ReadOnly = $true
$txtOutput.BackColor = [System.Drawing.Color]::FromArgb(30,30,30)
$txtOutput.ForeColor = [System.Drawing.Color]::White
$txtOutput.Font = New-Object System.Drawing.Font("Consolas", 10)
$txtOutput.BorderStyle = 'None'
$mainPanel.Controls.Add($txtOutput)

# Create button panel
$buttonPanel = New-Object System.Windows.Forms.Panel
$buttonPanel.Size = New-Object System.Drawing.Size(820,40)
$buttonPanel.Location = New-Object System.Drawing.Point(20,590)
$buttonPanel.BackColor = [System.Drawing.Color]::White
$mainPanel.Controls.Add($buttonPanel)

# Create Start button
$btnStart = New-Object System.Windows.Forms.Button
$btnStart.Location = New-Object System.Drawing.Point(0,0)
$btnStart.Size = New-Object System.Drawing.Size(200,30)
$btnStart.Text = 'Start Password Update'
$btnStart.Enabled = $false
Set-ButtonStyle $btnStart
$buttonPanel.Controls.Add($btnStart)

# Create Export button
$btnExport = New-Object System.Windows.Forms.Button
$btnExport.Location = New-Object System.Drawing.Point(220,0)
$btnExport.Size = New-Object System.Drawing.Size(200,30)
$btnExport.Text = 'Export Results'
$btnExport.Enabled = $false
Set-ButtonStyle $btnExport
$buttonPanel.Controls.Add($btnExport)

# Create Exit button
$btnExit = New-Object System.Windows.Forms.Button
$btnExit.Location = New-Object System.Drawing.Point(620,0)
$btnExit.Size = New-Object System.Drawing.Size(200,30)
$btnExit.Text = 'Exit'
$btnExit.BackColor = [System.Drawing.Color]::FromArgb(232,17,35)
Set-ButtonStyle $btnExit
$buttonPanel.Controls.Add($btnExit)

# Create progress bar
$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Location = New-Object System.Drawing.Point(20,640)
$progressBar.Size = New-Object System.Drawing.Size(820,20)
$progressBar.Style = 'Continuous'
$mainPanel.Controls.Add($progressBar)

# Function to write colored output
function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    $txtOutput.SelectionColor = [System.Drawing.Color]::$Color
    $txtOutput.AppendText("$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'): $Message`n")
    $txtOutput.ScrollToCaret()
}

# Function to write separator line
function Write-Separator {
    Write-ColorOutput ("-" * 80) "DarkGray"
}

# Discover button click event
$btnDiscover.Add_Click({
    $lvDCs.Items.Clear()
    $txtOutput.Clear()
    $progressBar.Value = 0
    $btnStart.Enabled = $false
    $btnExport.Enabled = $false
    
    Write-ColorOutput "Discovering Domain Controllers..." "Yellow"
    Write-Separator
    
    try {
        # Get all domain controllers
        $DomainControllers = Get-ADDomainController -Filter * | Select-Object Name, IPv4Address
        $totalDCs = $DomainControllers.Count
        
        foreach ($DC in $DomainControllers) {
            $item = New-Object System.Windows.Forms.ListViewItem($DC.Name)
            $item.SubItems.Add($DC.IPv4Address)
            $item.SubItems.Add("Ready")
            $item.Checked = $true
            $lvDCs.Items.Add($item)
        }
        
        Write-ColorOutput "Found $totalDCs Domain Controllers" "Green"
        $btnStart.Enabled = $true
    }
    catch {
        Write-ColorOutput "Error discovering DCs: $_" "Red"
    }
    
    Write-Separator
})

# Start button click event
$btnStart.Add_Click({
    $progressBar.Value = 0
    $btnStart.Enabled = $false
    $btnExport.Enabled = $false
    $Results = @()
    
    Write-ColorOutput "Starting DSRM password update process..." "Yellow"
    Write-Separator
    
    try {
        # Get selected DCs
        $selectedDCs = $lvDCs.Items | Where-Object { $_.Checked }
        $totalDCs = $selectedDCs.Count
        
        if ($totalDCs -eq 0) {
            Write-ColorOutput "No Domain Controllers selected!" "Red"
            $btnStart.Enabled = $true
            return
        }
        
        # Get the domain name
        $DomainName = (Get-ADDomain).DNSRoot
        Write-ColorOutput "Domain: $DomainName" "Cyan"
        Write-Separator
        
        $current = 0
        foreach ($item in $selectedDCs) {
            $current++
            $progressBar.Value = ($current / $totalDCs) * 100
            
            $NewPassword = Generate-RandomPassword -Length $cboPasswordLength.SelectedItem
            Write-ColorOutput "[$($item.Text)] Updating DSRM password..." "Yellow"
            
            try {
                Invoke-Command -ComputerName $item.Text -ScriptBlock {
                    param($Pwd)
                    $securePwd = ConvertTo-SecureString $Pwd -AsPlainText -Force
                    $cred = New-Object System.Management.Automation.PSCredential ("Administrator", $securePwd)
                    ntdsutil "set dsrm password" "reset password on server null" q q | Out-Null
                } -ArgumentList $NewPassword -ErrorAction Stop
                
                Write-ColorOutput "[$($item.Text)] DSRM password successfully updated." "Green"
                $item.SubItems[2].Text = "Updated Successfully"
                
                # Add results to the list
                $Results += [PSCustomObject]@{
                    "Domain Name"  = $DomainName
                    "DC Name"      = $item.Text
                    "IP Address"   = $item.SubItems[1].Text
                    "New Password" = $NewPassword
                }
            }
            catch {
                Write-ColorOutput "[$($item.Text)] Error occurred: $_" "Red"
                $item.SubItems[2].Text = "Update Failed"
            }
            Write-Separator
        }
        
        # Save results and enable export button if we have results
        if ($Results.Count -gt 0) {
            $script:Results = $Results
            $btnExport.Enabled = $true
            Write-ColorOutput "Process completed. Click 'Export Results' to save the password details." "Green"
        }
        else {
            Write-ColorOutput "Process completed but no passwords were updated successfully." "Red"
        }
    }
    catch {
        Write-ColorOutput "Error: $_" "Red"
    }
    finally {
        $btnStart.Enabled = $true
        $progressBar.Value = 100
    }
})

# Export button click event
$btnExport.Add_Click({
    $SaveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
    $SaveFileDialog.Filter = "CSV Files (*.csv)|*.csv"
    $SaveFileDialog.Title = "Save DSRM Passwords"
    $SaveFileDialog.FileName = "DSRM-Passwords-$(Get-Date -Format 'yyyyMMdd-HHmmss').csv"
    
    if ($SaveFileDialog.ShowDialog() -eq 'OK') {
        try {
            $script:Results | Export-Csv -Path $SaveFileDialog.FileName -NoTypeInformation -Encoding UTF8
            Write-ColorOutput "DSRM password details saved: $($SaveFileDialog.FileName)" "Green"
            [System.Windows.Forms.MessageBox]::Show(
                "Password details have been saved successfully.",
                "Export Complete",
                [System.Windows.Forms.MessageBoxButtons]::OK,
                [System.Windows.Forms.MessageBoxIcon]::Information
            )
        }
        catch {
            Write-ColorOutput "Error saving file: $_" "Red"
            [System.Windows.Forms.MessageBox]::Show(
                "Error saving file: $_",
                "Export Error",
                [System.Windows.Forms.MessageBoxButtons]::OK,
                [System.Windows.Forms.MessageBoxIcon]::Error
            )
        }
    }
})

# Exit button click event
$btnExit.Add_Click({
    $form.Close()
})

# Show the form
[System.Windows.Forms.Application]::EnableVisualStyles()
$form.ShowDialog() 
